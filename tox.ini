[base]
name = synthdb
files = {[base]name} tests docs/source/conf.py setup.py

[tox]
envlist =
    check-version
    check-packaging
    lint
    docs
    min_versions
    py{39,310,311,312}
    coverage

minversion = 3.18

[testenv]
allowlist_externals = /bin/bash
extras = test
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:.coverage-{envname}}
passenv =
    USE_PRE_SYNTHESIS_WORKFLOW
commands_pre =
    # This is only used to check that the current version of SynthDB is compatible with last
    # version of synthesis-workflow
    /bin/bash -c 'if [[ -n $USE_PRE_SYNTHESIS_WORKFLOW ]]; then \
        pip install --pre -U synthesis-workflow; \
    fi;'
commands =
    pytest \
        --basetemp={envtmpdir} \
        --cov={[base]name} \
        --cov-branch \
        --cov-fail-under=100 \
        --no-cov-on-fail \
        --cov-report term-missing \
        --cov-report html:reports/coverage-{envname} \
        --cov-report xml:reports/coverage-{envname}.xml \
        --html reports/pytest-{envname}.html \
        --junit-xml=reports/pytest-{envname}.xml \
        --self-contained-html \
        {posargs}

[testenv:coverage]
skip_install = true
deps = coverage
commands_pre =
commands =
    /bin/bash -c 'coverage combine .coverage-py*'
    coverage xml
    coverage report

[testenv:check-version]
skip_install = true
passenv =
    SKIP_CHECK_VERSION
deps = bbp-nse-ci>=0.2.5
commands_pre =
commands =
    /bin/bash -c 'if [[ -z $SKIP_CHECK_VERSION ]]; then do_release.py -p . check-version; do_release.py -p . check-changelog --release-only --path CHANGELOG.md; fi'

[testenv:check-packaging]
skip_install = true
deps =
    build
    twine
commands =
    python -m build -o {envtmpdir}/dist
    twine check {envtmpdir}/dist/*

[testenv:min_versions]
basepython = python3.9
deps =
    Requirements-Builder
commands_pre =
    requirements-builder --level=min --extras=test -o {envtmpdir}/requirements_min.txt setup.py
    pip install -r {envtmpdir}/requirements_min.txt
    pip freeze

[testenv:lint]
basepython = python3.9
deps =
    pre-commit
    pylint
commands =
    pre-commit run --all-files --show-diff-on-failure
    pylint -j {env:PYLINT_NPROCS:1} {[base]files}

[testenv:format]
basepython = python3
skip_install = true
deps =
    pre-commit
commands_pre =
commands =
    pre-commit run --all-files

[testenv:docs]
basepython = python3.9
changedir = docs
extras = docs
allowlist_externals =
    /bin/bash
    make
# set warnings as errors using the -W sphinx option
commands = make html SPHINXOPTS=-W
